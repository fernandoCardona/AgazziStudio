---
// Layout.astro
import WebPreloader from '../components/webPreloader.astro';
import BubbleBackground from '../components/bgComponents/BubbleBackground.astro';
import Navigation from '../components/Navigation.astro';
import SEOHead from '../components/SEOHead.astro';
import SchemaOrg from '../components/SchemaOrg.astro';
import '../styles/global.css'; // Importamos los estilos globales
import JsonLd from '../components/JsonLd.astro';

export interface Props {
  title: string;
  description?: string;
  lang: string;
  ogImage?: string;
  canonicalUrl?: string;
}

// Descripciones predeterminadas por idioma
const defaultDescriptions = {
  es: "Agazzi Studio | Gestión de contenido para sitios web y redes sociales en Barcelona y Sitges. Especialistas en desarrollo web (React, Next.js, Astro), WordPress, eCommerce, apps React Native y diseño UX/UI para soluciones digitales online y offline.",
  en: "Agazzi Studio | Website content and social media management experts in Barcelona & Sitges. Specialists in web development (React, Next.js, Astro), WordPress, eCommerce, React Native apps, and UX/UI design for online and offline digital solutions.",
  ca: "Agazzi Studio | Gestió de continguts per a llocs web i xarxes socials a Barcelona i Sitges. Especialistes en desenvolupament web (React, Next.js, Astro), WordPress, eCommerce, apps React Native i disseny UX/UI per a solucions digitals online i offline."
};


const { 
  title, 
  description, 
  lang = 'es',
  ogImage,
  canonicalUrl
} = Astro.props;

// Usar la descripción específica del idioma o la proporcionada como prop
const finalDescription = description || defaultDescriptions[lang] || defaultDescriptions.es;
---

<!DOCTYPE html>
<html lang={lang}>
  <head>
    <JsonLd 
    name="Agazzi Studio"
    description={finalDescription}
    sameAs={[
      "https://www.instagram.com/agazzi",
      // "https://www.linkedin.com/company/agazzi"
    ]}
  />
    <!-- Google tag (gtag.js) -->
    <script type="text/partyTown" async src="https://www.googletagmanager.com/gtag/js?id=G-H5WV4YMJGD"></script>
    <script type="text/partyTown">
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());

      gtag('config', 'G-H5WV4YMJGD');
    </script>
    
    <SEOHead 
      title={title}
      description={finalDescription}
      lang={lang}
      ogImage={ogImage}
      canonicalUrl={canonicalUrl}
    />
    <SchemaOrg 
      lang={lang}
      type="Organization"
      name="Agazzi Studio"
    />
    
    <!-- Cabecera de seguridad HSTS -->
    <meta http-equiv="Strict-Transport-Security" content="max-age=31536000; includeSubDomains; preload">
    
    <!-- Favicons -->
    <link rel="icon" type="image/png" href="/favicon-96x96.png" sizes="96x96" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="shortcut icon" href="/favicon.ico" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <meta name="apple-mobile-web-app-title" content="AgazziStudio.com" />
    <link rel="manifest" href="/site.webmanifest" />
    
    
    <!-- Resto de tus etiquetas head -->
    <!-- Optimizar carga de fuentes -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    
    <!-- Cargar fuentes con display=swap -->
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&family=Six+Caps&display=swap" rel="stylesheet" media="print" onload="this.media='all'" fetchpriority="low">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&family=Six+Caps&display=swap" rel="stylesheet" media="print" onload="this.media='all'" fetchpriority="low">
    <title>Agazzi Studio</title>
    

     
    <script is:inline>
      // Theme initialization script
      function initTheme() {
        // Check if user has a saved preference
        const savedTheme = localStorage.getItem('theme');
        
        if (savedTheme) {
          // Use saved preference if available
          document.documentElement.classList.toggle('dark', savedTheme === 'dark');
        } else {
          // If no saved preference, explicitly set to light theme
          document.documentElement.classList.remove('dark'); // Ensure dark class is removed
          localStorage.setItem('theme', 'light');
        }
      }
      
      // Run theme initialization immediately to prevent flash of incorrect theme
      initTheme();
      
      // Also run it again when DOM is loaded to ensure it takes effect
      document.addEventListener('DOMContentLoaded', initTheme);
    </script>
    
    <!-- Google Analytics is already implemented above in the head section -->
    <!-- CSS crítico para el encabezado -->
    <style>
      /* Estilos críticos para el logo y la navegación */
      .font-display {
        font-family: 'Six Caps', sans-serif;
        font-display: swap;
      }
      
      /* Otros estilos críticos para el encabezado */
    </style>
  </head>
  <body class="font-sans relative min-h-screen">
    <script is:inline>
      // Smooth scroll para todos los enlaces internos
      document.addEventListener('DOMContentLoaded', () => {
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
          anchor.addEventListener('click', function (e) {
            e.preventDefault();
            
            const targetId = this.getAttribute('href');
            if (!targetId || targetId === '#') return;
            
            const targetElement = document.querySelector(targetId);
            if (!targetElement) return;
            
            // Scroll suave a la sección
            window.scrollTo({
              top: targetElement.offsetTop - 80, // Ajuste para el header fijo
              behavior: 'smooth'
            });
            
            // Actualizar la URL sin recargar la página
            history.pushState(null, null, targetId);
          });
        });
        
        // Manejar la navegación inicial si hay un hash en la URL
        if (window.location.hash) {
          const targetElement = document.querySelector(window.location.hash);
          if (targetElement) {
            setTimeout(() => {
              window.scrollTo({
                top: targetElement.offsetTop - 80,
                behavior: 'smooth'
              });
            }, 100);
          }
        }
      });
    </script>
    
    <script is:inline>
      // Script para resetear la posición de scroll al recargar la página
      window.onload = function() {
        window.scrollTo(0, 0);
      }
      
      // Alternativa que funciona incluso si la página se carga desde caché
      if (history.scrollRestoration) {
        history.scrollRestoration = 'manual';
      }
      window.scrollTo(0, 0);
    </script>
    
    <div class="z-50">
      <WebPreloader />
    </div>
    <!-- Añadir el fondo de burbujas como primer elemento -->
    <div class="fixed inset-0 w-full h-full overflow-hidden pointer-events-none">
      <BubbleBackground 
        opacity="0.7" 
        zIndex="-1" 
        primaryColor="#ee7bb3" 
        secondaryColor="#d6d6d6c6" 
        bubbleCount="50"
        height="100vh"
      />
    </div>
    
    <header>
      <Navigation lang={lang} />
    </header>
    
    <main>
      <slot />
    </main>

    <script is:inline src="https://cdn.jsdelivr.net/npm/swiper@10/swiper-bundle.min.js" defer></script>
    <!-- Eliminar scripts duplicados de smooth scroll -->
    <script is:inline>
      document.addEventListener('DOMContentLoaded', () => {
        // Función unificada de smooth scroll
        const handleSmoothScroll = (targetId) => {
          const targetElement = document.querySelector(targetId);
          if (!targetElement) return;
          
          window.scrollTo({
            top: targetElement.offsetTop - 80,
            behavior: 'smooth'
          });
          history.pushState(null, null, targetId);
        };
    
        // Event listeners
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
          anchor.addEventListener('click', (e) => {
            e.preventDefault();
            const targetId = anchor.getAttribute('href');
            if (targetId && targetId !== '#') handleSmoothScroll(targetId);
          });
        });
    
        // Manejar hash inicial
        if (window.location.hash) {
          setTimeout(() => handleSmoothScroll(window.location.hash), 100);
        }
      });
    </script>
    
    <!-- Optimizar carga de GSAP y Lottie -->
    <!-- <script>
      window.addEventListener('load', () => {
        // Función para cargar scripts de manera segura
        const loadScript = (url, condition = true) => {
          return new Promise((resolve, reject) => {
            if (!condition) {
              resolve(false);
              return;
            }
            
            const script = document.createElement('script');
            script.src = url;
            script.async = true;
            script.onload = () => resolve(true);
            script.onerror = () => reject(new Error(`Failed to load script: ${url}`));
            document.head.appendChild(script);
          });
        };
        
        // Cargar scripts cuando el navegador esté inactivo
        const loadScriptsWhenIdle = async () => {
          try {
            // Cargar GSAP solo si hay elementos que lo necesitan
            const gsapNeeded = document.querySelector('[data-gsap]');
            await loadScript('https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js', gsapNeeded);
            
            // Cargar Lottie solo si hay elementos que lo necesitan
            const lottieNeeded = document.querySelector('[data-lottie]');
            await loadScript('https://cdnjs.cloudflare.com/ajax/libs/lottie-web/5.12.2/lottie.min.js', lottieNeeded);
            
            console.log('Scripts cargados correctamente');
          } catch (error) {
            console.error('Error al cargar scripts:', error);
          }
        };
        
        // Usar requestIdleCallback si está disponible, o setTimeout como fallback
        if (window.requestIdleCallback) {
          requestIdleCallback(() => loadScriptsWhenIdle());
        } else {
          setTimeout(loadScriptsWhenIdle, 1);
        }
      });
    </script> -->
    <!-- Optimizar carga de GSAP (ESM) y Lottie (UMD) -->
<script>
  window.addEventListener('load', () => {
    // Helper para cargar UMD scripts
    const loadScript = (url, condition = true) => {
      return new Promise((resolve, reject) => {
        if (!condition) return resolve(false);
        const script = document.createElement('script');
        script.src = url;
        script.async = true;
        script.onload  = () => resolve(true);
        script.onerror = () => reject(new Error(`Failed to load script: ${url}`));
        document.head.appendChild(script);
      });
    };

    // Función principal
    const loadThirdPartiesWhenIdle = async () => {
      try {
        // 1) GSAP — sólo si hay al menos un elemento [data-gsap]
        if (document.querySelector('[data-gsap]')) {
          // Import dinámico de la versión ESM de GSAP
          const { gsap } = await import(
            'https://cdn.jsdelivr.net/npm/gsap@3.12.2/esm/gsap.min.js'
          );
          // Registrar en global para que tu código que usa window.gsap siga funcionando
          window.gsap = gsap;
          console.log('GSAP (ESM) cargado correctamente');
        }

        // 2) Lottie — sólo si hay al menos un elemento [data-lottie]
        if (document.querySelector('[data-lottie]')) {
          await loadScript(
            'https://cdnjs.cloudflare.com/ajax/libs/lottie-web/5.12.2/lottie.min.js'
          );
          console.log('Lottie cargado correctamente');
        }

      } catch (error) {
        console.error('Error al cargar librerías de terceros:', error);
      }
    };

    // Disparamos cuando el navegador esté inactivo (fallback a setTimeout)
    if ('requestIdleCallback' in window) {
      requestIdleCallback(loadThirdPartiesWhenIdle);
    } else {
      setTimeout(loadThirdPartiesWhenIdle, 1);
    }
  });
</script>

    <script is:inline>
      // Script para resetear la posición de scroll al recargar la página
      window.onload = function() {
        window.scrollTo(0, 0);
      }
      
      // Alternativa que funciona incluso si la página se carga desde caché
      if (history.scrollRestoration) {
        history.scrollRestoration = 'manual';
      }
      window.scrollTo(0, 0);
    </script>
    

    
    <!-- Cargar analytics de manera diferida -->
    <script defer>
      window.addEventListener('load', () => {
        setTimeout(() => {
          // Cargar Google Tag Manager
          const gtmScript = document.createElement('script');
          gtmScript.src = 'https://www.googletagmanager.com/gtag/js?id=G-H5WV4YMJGD';
          gtmScript.async = true;
          document.head.appendChild(gtmScript);
        }, 3000); // Retrasar 3 segundos después de la carga
      });
    </script>
    <script is:inline src="/scripts/analytics-events.js" defer></script>
  </body>
</html>


<!-- Cargar scripts de manera optimizada -->
<script>
  // Cargar GSAP de manera segura
  window.addEventListener('load', () => {
    const loadGSAP = async () => {
      try {
        // Crear un script element
        const script = document.createElement('script');
        script.src = 'https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js';
        script.async = true;
        
        // Esperar a que el script se cargue
        await new Promise((resolve, reject) => {
          script.onload = resolve;
          script.onerror = reject;
          document.head.appendChild(script);
        });

        // Inicializar GSAP después de que se haya cargado
        if (window.gsap) {
          // Aquí puedes inicializar tus animaciones GSAP
          // console.log('GSAP cargado correctamente');
        }
      } catch (error) {
        console.error('Error al cargar GSAP:', error);
      }
    };

    // Usar requestIdleCallback para cargar GSAP cuando el navegador esté inactivo
    if (window.requestIdleCallback) {
      requestIdleCallback(() => loadGSAP());
    } else {
      setTimeout(loadGSAP, 1);
    }
  });
</script>
<script>
  window.addEventListener('load', () => {
    const loadScripts = async () => {
      // 1) GSAP como ESM (no UMD)
      if (document.querySelector('[data-gsap]')) {
        try {
          const { gsap } = await import('https://cdn.skypack.dev/gsap@3.12.2');
          window.gsap = gsap;
          console.log('GSAP (ESM) cargado');
        } catch (e) {
          console.error('Error cargando GSAP ESM:', e);
        }
      }

      // 2) Lottie como ESM
      if (document.querySelector('[data-lottie]')) {
        try {
          const lottieModule = await import('https://cdn.skypack.dev/lottie-web');
          window.lottie = lottieModule.default || lottieModule;
          console.log('Lottie (ESM) cargado');
        } catch (e) {
          console.error('Error cargando Lottie ESM:', e);
        }
      }
    };

    // Dispara en idle o tras 1 ms
    const idle = window.requestIdleCallback || (fn => setTimeout(fn, 1));
    idle(loadScripts);
  });
</script>

<script>
  // Configurar Intersection Observer para lazy loading de imágenes
  document.addEventListener('DOMContentLoaded', () => {
    const imageObserver = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target;
          const src = img.getAttribute('data-src');
          if (src) {
            img.src = src;
            img.removeAttribute('data-src');
            observer.unobserve(img);
          }
        }
      });
    }, {
      rootMargin: '50px 0px',
      threshold: 0.01
    });

    // Observar todas las imágenes con data-src
    document.querySelectorAll('img[data-src]').forEach(img => {
      imageObserver.observe(img);
    });
  });
</script>