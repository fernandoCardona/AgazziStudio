<script>
  document.addEventListener('DOMContentLoaded', () => {
    const themeToggle = document.getElementById('theme-toggle') as HTMLInputElement;
    
    // First, ensure we're in light mode by default if no preference is set
    if (!localStorage.getItem('theme')) {
      // Set light theme as default (opposite of current behavior)
      document.documentElement.classList.remove('dark');
      localStorage.setItem('theme', 'light');
    }
    
    // Set initial state of the toggle based on current theme
    if (themeToggle) {
      // Invert the checked state to match our desired behavior
      // If dark mode is active, toggle should be checked
      themeToggle.checked = document.documentElement.classList.contains('dark');
    }
    
    // Handle toggle changes
    themeToggle?.addEventListener('change', (e) => {
      // Cast the target to HTMLInputElement to access the checked property
      const target = e.target as HTMLInputElement;
      // Invert the theme selection logic
      const newTheme = target.checked ? 'dark' : 'light';
      
      // Update DOM
      document.documentElement.classList.toggle('dark', target.checked);
      
      // Save preference
      localStorage.setItem('theme', newTheme);
      
      // Aplicar color gris a todos los textos en modo claro
      if (newTheme === 'light') {
        const grayColor = '#5b6875'; // Color gris de tailwind.config
        
        // Seleccionar todos los elementos de texto en el documento
        const allTextElements = document.querySelectorAll('h1, h2, h3, h4, h5, h6, p, a, li, span, label');
        
        // Aplicar el color gris a todos los elementos de texto
        allTextElements.forEach(element => {
          // No cambiar elementos con clases espec√≠ficas que ya tienen estilos
          if (!element.classList.contains('text-white') && 
              !element.classList.contains('text-black') &&
              !element.classList.contains('text-primary') &&
              !element.classList.contains('text-secondary') &&
              !element.classList.contains('text-accent')) {
            element.style.color = grayColor;
          }
        });
      }
      
      // Dispatch theme change event for other components
      document.dispatchEvent(new CustomEvent('themeChanged', { 
        detail: { theme: newTheme } 
      }));
    });
  });
</script>