---
import { loadTranslations, normalizeLanguageCode } from '../../i18n/i18n.js';
import BottomWaveBackground from '../bgComponents/BottomWaveBackground.astro'

const { lang = 'es' } = Astro.props;
const normalizedLang = normalizeLanguageCode(lang);
const contactTranslations = await loadTranslations(normalizedLang, 'contact');
---

<footer id="contact" class="relative bg-transparent text-gray-600 dark:text-white pt-16 pb-10">
  <div class="absolute inset-0 w-full h-full pointer-events-none wave-container" style="z-index: 0;">
    <BottomWaveBackground />
  </div>
  <div class="container mx-auto px-6 md:px-8 relative" style="z-index: 10;">
    <div class="flex flex-col items-center justify-center text-center mb-10">
      <div class="flex items-center space-x-6 mb-6">
        <!-- tus iconos... -->
      </div>

      <h2 class="SectionTitle text-7xl md:text-8xl font-display font-bold mb-6 text-gray-600 dark:text-white fade-up-element opacity-0 translate-y-10" data-delay="0.4">
        {contactTranslations.title || 'CONTACTO'}
      </h2>
      <p class="SectionSubTitle text-xl md:text-2xl max-w-3xl mx-auto text-gray-600 dark:text-white fade-up-element opacity-0 translate-y-10" data-delay="0.8">
        {contactTranslations.subtitle || 'Estamos aquí para ayudarte con tu proyecto'}
      </p>
    </div>

    <div class="flex flex-col md:flex-row md:items-center md:justify-between border-t border-b border-gray py-8 mb-10 fade-up-element opacity-0 translate-y-10" data-delay="0.8">
      <div class="mb-6 md:mb-0 md:max-w-lg">
        <h3 class="text-[24px] md:text-[28px] lg:text-[32px] font-semibold mb-2 text-gray-600 dark:text-white fade-up-element opacity-0 translate-y-10" data-delay="0.8">
          {contactTranslations.stayTuned.title}
        </h3>
        <!-- Cambiamos la clase text-current por clases específicas para cada tema -->
        <p class="text-[14px] leading-[18px] md:text-[18px] md:leading-[22px] lg:text-[22px] lg:leading-[26px] text-gray-600 dark:text-white fade-up-element opacity-0 translate-y-10" data-delay="0.8">
          {contactTranslations.stayTuned.description}
        </p>
      </div>

      <a 
        href={`mailto:${contactTranslations.info.emailAddress}`} 
        class="contact-button group inline-flex justify-center items-center px-6 py-2 border border-gray-600 dark:border-purple-600 transition-all fade-up-element opacity-0 translate-y-10" data-delay="1" 
      > 
        <span class="contact-button-text">{contactTranslations.form.submit}</span> 
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 ml-2 contact-button-icon" fill="none" viewBox="0 0 24 24" stroke="currentColor"> 
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" /> 
        </svg> 
      </a>
      
    </div>

    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-8 mb-10 fade-up-element opacity-0 translate-y-10" data-delay="0.8">
      <div class=" fade-up-element opacity-0 translate-y-10" data-delay="0.8">
        <h2 class="blockTitle text-[24px] md:text-[28px] lg:text-[32px] font-bold mb-4 text-gray-600 dark:text-white">
          {contactTranslations.info.title}
        </h2>
        <ul class="text-[14px] leading-[18px] md:text-[18px] md:leading-[22px] lg:text-[22px] lg:leading-[26px] space-y-2 text-gray-600 dark:text-white">
          <li>
            {contactTranslations.info.email}:
            <a href={`mailto:${contactTranslations.info.emailAddress}`} class="hover:underline">
              {contactTranslations.info.emailAddress}
            </a>
          </li>
          <li>
            {contactTranslations.info.phone}:
            <a href="tel:+34661175496" class="hover:underline">
              {contactTranslations.info.phoneNumber}
            </a>
          </li>
          <li>
            {contactTranslations.info.address}: {contactTranslations.info.addressText}
          </li>
        </ul>
      </div>

      <div class=" fade-up-element opacity-0 translate-y-10" data-delay="1">
        <h2 class="blockTitle text-[24px] md:text-[28px] lg:text-[32px] font-bold mb-4 text-gray-600 dark:text-white">
          {contactTranslations.sitemap.title}
        </h2>
        <ul class="text-[14px] leading-[18px] md:text-[18px] md:leading-[22px] lg:text-[22px] lg:leading-[26px] space-y-2 text-gray-600 dark:text-white">
          <li><a href="#about" class="hover:underline">{contactTranslations.sitemap.about}</a></li>
          <li><a href="#services" class="hover:underline">{contactTranslations.sitemap.services}</a></li>
          <li><a href="#faq" class="hover:underline">{contactTranslations.sitemap.faq}</a></li>
          <li><a href="#partners" class="hover:underline">{contactTranslations.sitemap.partners}</a></li>
          <li><a href="#testimonials" class="hover:underline">{contactTranslations.sitemap.testimonials}</a></li>
        </ul>
      </div>

      <div class=" fade-up-element opacity-0 translate-y-10" data-delay="1.2">
        <h2 class="blockTitle text-[24px] md:text-[28px] lg:text-[32px] font-bold mb-4 text-gray-600 dark:text-white">
          {contactTranslations.faq.title}
        </h2>
        <ul class="text-[14px] leading-[18px] md:text-[18px] md:leading-[22px] lg:text-[22px] lg:leading-[26px] space-y-2 text-gray-600 dark:text-white">
          <li><a href="#faq" data-category="mediaManager" class="hover:underline">{contactTranslations.faq.mediaManager}</a></li>
          <li><a href="#faq" data-category="webAppDev" class="hover:underline">{contactTranslations.faq.webDevelopment}</a></li>
          <li><a href="#faq" data-category="graphicDesign" class="hover:underline">{contactTranslations.faq.graphicDesign}</a></li>
        </ul>
      </div>
    </div>

    <div class="pt-8 border-t border-gray flex flex-col md:flex-row md:justify-between md:items-center text-[16px] leading-[22px] text-gray-600 dark:text-white fade-up-element opacity-0 translate-y-10" data-delay="0.4">
      <p class="mb-4 md:mb-0 fade-up-element opacity-0 translate-y-10" data-delay="0.2">{contactTranslations.footer.copyright}</p>
      <div class="flex space-x-4">
        <a href="#privacy-policy" class="paragraphTitle hover:underline fade-up-element opacity-0 translate-y-10" data-delay="0.4">{contactTranslations.footer.privacyPolicy}</a>
        <a href="#terms-of-service" class="paragraphTitle hover:underline fade-up-element opacity-0 translate-y-10" data-delay="0.6">
          {contactTranslations.footer?.termsOfService || 'Términos de Servicio'}
        </a>
      </div>
    </div>
  </div>
</footer>

<style>
  /* Asegurarse de que todos los textos respeten el tema */
  #contact * {
    color: inherit;
  }
  
  /* Forzar fondo transparente siempre */
  #contact {
    background-color: transparent !important;
  }
  
  /* Estilos adaptables al tema */
  /* :global(html.dark) .text-theme-text { color: #fff !important; }
  :global(html:not(.dark)) .text-theme-text { color: #5b6875 !important; }

  :global(html.dark) .text-theme-secondary { color: #aaa !important; }
  :global(html:not(.dark)) .text-theme-secondary { color: #5b6875 !important; } */

  /* Estilos específicos para el botón de contacto */
  .contact-button {
    font-size: 22px;
    line-height: 26px;
    font-weight: 300;
    transition: all 0.3s ease;
  }
  
  .contact-button-text {
    color: #5b6875 !important;
    transition: color 0.3s ease;
  }
  
  :global(html.dark) .contact-button-text {
    color: #7943f6 !important;
  }
  
  .contact-button:hover {
    background-color: #5b6875 !important;
  }
  
  .contact-button:hover .contact-button-text {
    color: white !important;
  }
  
  :global(html.dark) .contact-button:hover {
    background-color: #7943f6 !important;
  }
  
  :global(html.dark) .contact-button:hover .contact-button-text {
    color: #fff !important;
  }
  
  /* Estilos para el SVG dentro del botón */
  .contact-button-icon {
    stroke: #5b6875 !important;
    transition: stroke 0.3s ease;
  }
  
  :global(html.dark) .contact-button-icon {
    stroke: #7943f6 !important;
  }
  
  .contact-button:hover .contact-button-icon {
    stroke: white !important;
  }
  
  :global(html.dark) .contact-button:hover .contact-button-icon {
    stroke: white !important;
  }
</style>

<script>
  // Función para aplicar el tema correcto al componente Contact
  function applyThemeToContact() {
    const isDark = document.documentElement.classList.contains('dark');
    
    // Asegurar que el fondo siempre sea transparente
    const contactSection = document.getElementById('contact');
    if (contactSection) {
      contactSection.style.backgroundColor = 'transparent';
    }
    
    // Seleccionar los encabezados y elementos de título
    const headingElements = document.querySelectorAll('#contact h1, #contact h2, #contact h3, #contact h4, #contact h5, #contact h6, #contact .blockTitle');
    
    // Seleccionar los párrafos y textos secundarios
    const paragraphElements = document.querySelectorAll('#contact p:not(.SectionSubTitle), #contact span, #contact li');
    
    // Seleccionar los enlaces de política y términos
    const policyLinks = document.querySelectorAll('#contact .paragraphTitle');
    
    // Aplicar color morado a los encabezados en modo oscuro
    headingElements.forEach(element => {
      if (element.tagName === 'svg' || element.closest('svg')) {
        return;
      }
      
      // Aplicar color según el tema
      element.style.color = isDark ? '#7943f6' : '#5b6875';
    });
    
    // Aplicar color gris a los párrafos en modo oscuro
    paragraphElements.forEach(element => {
      if (element.tagName === 'svg' || element.closest('svg')) {
        return;
      }
      
      // Aplicar color según el tema
      element.style.color = '#5b6875';
    });
    
    // Aplicar color morado a los enlaces de política y términos en modo oscuro
    policyLinks.forEach(element => {
    // Siempre aplicar color gris, independientemente del tema
    element.style.color = '#5b6875';
    });
    
    // Aplicar color al borde del botón de enviar
    const contactButton = document.querySelector('.contact-button');
    if (contactButton) {
    contactButton.style.borderColor = isDark ? '#7943f6' : '#5b6875';
    }
    
    // Asegurar que los bordes sean siempre grises
    const borders = document.querySelectorAll('#contact .border-gray');
    borders.forEach(element => {
      element.style.borderColor = '#5b6875';
    });
  }
  
  // Aplicar tema al cargar
  document.addEventListener('DOMContentLoaded', applyThemeToContact);
  
  // Aplicar tema cuando cambia
  document.addEventListener('themeChanged', () => {
    setTimeout(applyThemeToContact, 50);
  });
  
  // Verificar también cuando la ventana termina de cargar
  window.addEventListener('load', applyThemeToContact);
  
  // Aplicar cada vez que se detecte un cambio en las clases del documento
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.attributeName === 'class' && mutation.target === document.documentElement) {
        applyThemeToContact();
      }
    });
  });
  
  observer.observe(document.documentElement, { attributes: true });
</script>

<style>
  /* Añadir transiciones suaves para los cambios de tema */
  #contact, #contact form, #contact input, #contact textarea, #contact label, #contact button {
    transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease;
  }
  
  /* Estilos específicos para el formulario de contacto */
  #contact form {
    background-color: var(--form-bg-color);
    border: 1px solid var(--form-border-color);
    transition: background-color 0.3s ease, border-color 0.3s ease;
  }
  
  #contact input, #contact textarea {
    background-color: var(--input-bg-color);
    border: 1px solid var(--input-border-color);
    color: var(--input-text-color);
    transition: background-color 0.3s ease, border-color 0.3s ease, color 0.3s ease;
  }
  
  :global(html.dark) #contact form {
    --form-bg-color: #0D0D0D;
    --form-border-color: #7943f6;
  }
  
  :global(html:not(.dark)) #contact form {
    --form-bg-color: transparent;
    --form-border-color: rgba(0, 0, 0, 0.1);
  }
  
  /* :global(html.dark) #contact input, :global(html.dark) #contact textarea {
    --input-bg-color: #1a1a1a;
    --input-border-color: rgba(255, 255, 255, 0.1);
    --input-text-color: #fff;
  }
  
  :global(html:not(.dark)) #contact input, :global(html:not(.dark)) #contact textarea {
    --input-bg-color: #f9fafb;
    --input-border-color: rgba(0, 0, 0, 0.1);
    --input-text-color: #5b6875;
  } */
</style>

<style>
  /* Estilos para los enlaces de política y términos */
  .paragraphTitle {
    color: #5b6875 !important;
    transition: color 0.3s ease;
  }
  
  /* En modo dark, los enlaces de política y términos permanecen grises */
  :global(html.dark) .paragraphTitle {
    color: #5b6875 !important;
  }
  
  /* Asegurarse de que los bordes sean siempre grises */
  #contact .border-gray {
    border-color: #5b6875 !important;
  }
  
  /* Estilos para SectionTitle - SOLO COLOR */
  h2.SectionTitle {
    color: #5b6875 !important;
  }

  /* En modo dark, el título cambia a morado - SOLO COLOR */
  :global(html.dark) h2.SectionTitle {
    color: #7943f6 !important;
  }

  /* Estilos para SectionSubTitle - SOLO COLOR */
  p.SectionSubTitle {
    color: #5b6875 !important;
  }

  /* En modo dark, el subtítulo permanece gris - SOLO COLOR */
  :global(html.dark) p.SectionSubTitle {
    color: #5b6875 !important;
  }
  
  /* Estilos para el botón en modo claro */
  button[type="submit"] {
    background-color: #5b6875 !important;
    color: #fff !important;
    transition: background-color 0.3s ease, color 0.3s ease;
  }
  
  /* En modo dark, el botón cambia a morado */
  :global(html.dark) button[type="submit"] {
    background-color: #7943f6 !important;
    color: #fff !important;
  }
  
  /* Hover para el botón */
  button[type="submit"]:hover {
    opacity: 0.9;
  }

    /* Estilos para las animaciones */
    .fade-up-element {
    transition: opacity 0.6s ease-out, transform 0.6s ease-out;
  }
  
  .fade-up-element.visible {
    opacity: 1;
    transform: translateY(0);
  }
</style>

<script>
  // Script para manejar los enlaces de FAQ
  document.addEventListener('DOMContentLoaded', () => {
    const faqLinks = document.querySelectorAll('a[href="#faq"][data-category]');
    
    faqLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        // Prevenir el comportamiento predeterminado
        e.preventDefault();
        
        // Obtener la categoría
        const category = link.getAttribute('data-category');
        
        // Navegar a la sección FAQ
        const faqSection = document.getElementById('faq');
        if (faqSection) {
          faqSection.scrollIntoView({ behavior: 'smooth' });
          
          // Emitir un evento personalizado que el componente FAQ puede escuchar
          const event = new CustomEvent('showFaqCategory', { 
            detail: { category: category },
            bubbles: true 
          });
          link.dispatchEvent(event);
          
          // También podemos almacenar la categoría en sessionStorage para que el componente FAQ la lea
          sessionStorage.setItem('activeFaqCategory', category);
        }
      });
    });
  });
</script>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const observerOptions = {
      root: null,
      rootMargin: '0px',
      threshold: 0.1
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const element = entry.target;
          const delay = element.dataset.delay || 0;
          
          setTimeout(() => {
            element.classList.add('visible');
          }, delay * 1000);
          
          observer.unobserve(element);
        }
      });
    }, observerOptions);

    document.querySelectorAll('.fade-up-element').forEach(element => {
      observer.observe(element);
    });
  });
</script>
</footer>
