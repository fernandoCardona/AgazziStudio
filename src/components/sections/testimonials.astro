---
import { loadTranslations, normalizeLanguageCode } from '../../i18n/i18n';

const { lang = 'es' } = Astro.props;
// Normalizar el código de idioma
const normalizedLang = normalizeLanguageCode(lang);
// console.log(`Testimonials component - Idioma normalizado: ${normalizedLang}`);

// Cargar traducciones de testimonials
const testimonialTranslations = await loadTranslations(normalizedLang, 'testimonials');
// console.log('Traducciones de testimonials cargadas:', testimonialTranslations);

// Función para generar colores aleatorios para avatares
function getRandomColor() {
  const colors = [
    'bg-blue-500', 'bg-red-500', 'bg-green-500', 'bg-yellow-500', 
    'bg-purple-500', 'bg-pink-500', 'bg-indigo-500', 'bg-teal-500'
  ];
  return colors[Math.floor(Math.random() * colors.length)];
}

// Función para obtener iniciales del nombre
function getInitials(name) {
  return name.split(' ').map(n => n[0]).join('').toUpperCase();
}
---

<!-- Mantengo la parte superior del componente igual -->

<section id="testimonials" class="w-[100vw] bg-black dark:bg-black light:bg-white text-white dark:text-white light:text-black py-20">
  <div class="container mx-auto px-6 md:px-8">
    <div class="mb-12 text-center">
      <h2 class="SectionTitle text-7xl md:text-8xl font-display font-bold mb-6 fade-up-element opacity-0 translate-y-10" data-delay="0.2">{testimonialTranslations.title}</h2>
      <p class="SectionSubTitle text-[16px] xs:text-[18px] sm:text-[22px] leading-[20px] xs:leading-[22px] sm:leading-[26px] font-sans mx-auto  fade-up-element opacity-0 translate-y-10" data-delay="0.4">
      {testimonialTranslations.description}
      </p>
    </div>

    <div class="testimonial-carousel relative  fade-up-element opacity-0 translate-y-10" data-delay="0.6">
      <!-- Botones de navegación (flechas) - ahora fuera del swiper-container -->
      <div class="swiper-button-prev"></div>
      <div class="swiper-button-next"></div>
      
      <div class="swiper-container overflow-hidden">
        <div class="swiper-wrapper">
          {testimonialTranslations.testimonials.map((testimonial, index) => (
            <div class="swiper-slide">
              <div class="bg-[#0D0D0D] dark:bg-[#0D0D0D] light:bg-black/10 p-8 rounded-lg flex flex-col testimonial-card">
                <div class="flex items-center mb-6">
                  <div class={`avatar-circle w-12 h-12 rounded-full overflow-hidden mr-4 flex items-center justify-center text-white font-bold ${getRandomColor()} border-2 border-gray dark:border-gray light:border-gray`}>
                    {getInitials(testimonial.name)}
                  </div>
                  <div>
                    <h3 class="font-bold text-lg testimonial-name">{testimonial.name}</h3>
                    <p class="text-gray-400 dark:text-gray-400 light:text-gray text-sm">{testimonial.position}</p>
                  </div>
                </div>
                <p class="text-gray-300 dark:text-gray-300 light:text-gray mb-6 flex-grow">{testimonial.text}</p>
                <div class="flex items-center mt-auto">
                  <div class="flex mr-2">
                    <span class="text-yellow-400">
                      {'★'.repeat(testimonial.stars) + '☆'.repeat(5 - testimonial.stars)}
                    </span>
                  </div>
                  <span class="text-gray-400 dark:text-gray-400 light:text-gray-700">{testimonial.stars}.0</span>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
      
      <!-- Navegación del carrusel (bullets) -->
      <div class="swiper-pagination !bottom-0 text-pink dark:text-purple"></div>
      
      <!-- Botones de navegación (flechas) -->
      <button class="swiper-button-prev text-gray dark:text-purple">
        <!-- SVG o contenido del botón -->
      </button>
      
      <button class="swiper-button-next text-gray dark:text-purple">
        <!-- SVG o contenido del botón -->
      </button>
    </div>
  </div>
</section>

<script>
  import Swiper from 'swiper';
  import { Pagination, Autoplay, Navigation } from 'swiper/modules';
  import 'swiper/css';
  import 'swiper/css/pagination';
  import 'swiper/css/navigation';

  document.addEventListener('DOMContentLoaded', () => {
    // Primero, aseguramos que todas las tarjetas tengan la misma altura
    const equalizeCardHeights = () => {
      const cards = document.querySelectorAll('.testimonial-card');
      let maxHeight = 0;
      
      // Resetear alturas para medir correctamente
      cards.forEach(card => {
        card.style.height = 'auto';
        const height = card.offsetHeight;
        maxHeight = Math.max(maxHeight, height);
      });
      
      // Aplicar la altura máxima a todas las tarjetas
      cards.forEach(card => {
        card.style.height = `${maxHeight}px`;
      });
    };

    // Inicializar Swiper
    const swiper = new Swiper('.swiper-container', {
      modules: [Pagination, Autoplay, Navigation],
      slidesPerView: 1,
      spaceBetween: 20,
      loop: true,
      autoplay: {
        delay: 5000,
        disableOnInteraction: false,
      },
      pagination: {
        el: '.swiper-pagination',
        clickable: true,
      },
      navigation: {
        nextEl: '.swiper-button-next',
        prevEl: '.swiper-button-prev',
      },
      breakpoints: {
        768: {
          slidesPerView: 2,
          spaceBetween: 20,
        },
        1024: {
          slidesPerView: 3,
          spaceBetween: 30,
        },
      },
      on: {
        init: function() {
          // Igualar alturas después de inicializar
          setTimeout(equalizeCardHeights, 100);
        },
        resize: function() {
          // Recalcular alturas al cambiar el tamaño de la ventana
          setTimeout(equalizeCardHeights, 100);
        }
      }
    });
    
    // Detectar cambios de tema y actualizar los bullets
    document.addEventListener('themeChanged', (e) => {
      updateBulletColors(e.detail.theme);
    });
    
    // Configurar colores iniciales de los bullets según el tema actual
    const isDark = document.documentElement.classList.contains('dark');
    updateBulletColors(isDark ? 'dark' : 'light');
    
    function updateBulletColors(theme) {
      const bullets = document.querySelectorAll('.swiper-pagination-bullet');
      
      bullets.forEach(bullet => {
        const isActive = bullet.classList.contains('swiper-pagination-bullet-active');
        
        // Ajustar el ancho para bullets activos
        if (isActive) {
          bullet.style.width = '2rem';
          bullet.style.borderRadius = '10px';
        } else {
          bullet.style.width = '0.75rem';
          bullet.style.borderRadius = '50%';
        }
        
        // Ajustar la altura para todos los bullets
        bullet.style.height = '0.75rem';
        
        if (theme === 'dark') {
          // Usar !important y establecer todos los estilos juntos para mayor prioridad
          if (isActive) {
            bullet.setAttribute('style', 'background-color: #7943f6 !important; width: 2rem; border-radius: 10px; height: 0.75rem;');
          } else {
            bullet.setAttribute('style', 'background-color: rgba(121, 67, 246, 1) !important; width: 0.75rem; border-radius: 50%; height: 0.75rem;');
          }
        } else {
          // Modo claro
          if (isActive) {
            bullet.setAttribute('style', 'background-color: rgba(0, 0, 0, 0.7) !important; width: 2rem; border-radius: 10px; height: 0.75rem;');
          } else {
            bullet.setAttribute('style', 'background-color: rgba(0, 0, 0, 0.3) !important; width: 0.75rem; border-radius: 50%; height: 0.75rem;');
          }
        }
      });
    }
    
    // Observar cambios en los bullets activos
    const observer = new MutationObserver((mutations) => {
      // Añadir esto al final del script
      setTimeout(() => {
        const isDark = document.documentElement.classList.contains('dark');
        updateBulletColors(isDark ? 'dark' : 'light');
      }, 500);
    });
    
    const paginationEl = document.querySelector('.swiper-pagination');
    if (paginationEl) {
      observer.observe(paginationEl, { 
        childList: true,
        subtree: true,
        attributes: true,
        attributeFilter: ['class']
      });
    }
    
    // También igualar alturas cuando cambian los slides
    swiper.on('slideChangeTransitionEnd', equalizeCardHeights);
    
    // Asegurar que las alturas se igualen cuando las imágenes se carguen
    window.addEventListener('load', equalizeCardHeights);
  });
</script>

<script>
  // Función para aplicar el tema correcto a los testimonios
  function applyThemeToTestimonials() {
    const isDark = document.documentElement.classList.contains('dark');
    const theme = isDark ? 'dark' : 'light';
    // console.log('Testimonials: Aplicando tema', theme);
    
    const testimonialCards = document.querySelectorAll('.testimonial-card');
    const testimonialTexts = document.querySelectorAll('.testimonial-card p:not(.text-sm)');
    const testimonialNames = document.querySelectorAll('.testimonial-card h3');
    const testimonialPositions = document.querySelectorAll('.testimonial-card p.text-sm');
    const testimonialSection = document.getElementById('testimonials');
    const testimonialTitle = document.querySelector('#testimonials h2');
    const testimonialDescription = document.querySelector('#testimonials > div > div > p');
    
    if (theme === 'dark') {
      // Aplicar estilos para tema oscuro
      testimonialSection.style.backgroundColor = 'transparent'; // Cambiado a transparente
      testimonialSection.style.color = '#fff';
      
      testimonialTitle.style.color = '#fff';
      testimonialDescription.style.color = '#9ca3af'; // text-gray-400
      
      testimonialCards.forEach(card => {
        card.style.backgroundColor = '#0D0D0D';
        card.style.color = '#fff';
        card.style.border = 'none';
      });
      
      testimonialTexts.forEach(text => {
        text.style.color = '#d1d5db'; // text-gray-300
      });
      
      testimonialNames.forEach(name => {
        name.style.color = '#fff';
      });
      
      testimonialPositions.forEach(position => {
        position.style.color = '#9ca3af'; // text-gray-400
      });
    } else {
      // Aplicar estilos para tema claro
      testimonialSection.style.backgroundColor = '#fff'; // Cambiado a transparente
      testimonialSection.style.color = '#5b6875';
      
      testimonialTitle.style.color = '#5b6875';
      testimonialDescription.style.color = '#5b6875';
      
      testimonialCards.forEach(card => {
        card.style.backgroundColor = '#fff';
        card.style.color = '#5b6875';
        card.style.border = '1px solid #5b6875';
      });
      
      testimonialTexts.forEach(text => {
        text.style.color = '#5b6875';
      });
      
      // En la función applyThemeToTestimonials, modifica esta parte:
      testimonialNames.forEach(name => {
      if (theme === 'dark') {
      name.style.color = '#7943f6'; // Color púrpura en modo oscuro
      } else {
      name.style.color = '#5b6875';
      }
      });
      
      testimonialPositions.forEach(position => {
        position.style.color = '#5b6875'; // Cambiado de #374151
      });
    }
  }
  
  // Aplicar tema al cargar
  document.addEventListener('DOMContentLoaded', applyThemeToTestimonials);
  
  // Aplicar tema cuando cambia
  document.addEventListener('themeChanged', (event) => {
    // console.log('Testimonials: Evento themeChanged recibido', event.detail.theme);
    applyThemeToTestimonials();
  });
  
  // Verificar también cuando la ventana termina de cargar
  window.addEventListener('load', applyThemeToTestimonials);
</script>

<style>
  /* Añadir transiciones suaves para los cambios de tema */
  .testimonial-card,
  .testimonial-text,
  .testimonial-name,
  .testimonial-position {
    transition: background-color 0.3s ease, color 0.3s ease;
  }
  
  /* Estilos específicos para los avatares */
  .avatar-circle {
    background-color: var(--avatar-bg-color);
    border: 2px solid #5b6875;
    transition: border-color 0.3s ease, background-color 0.3s ease;
  }
  
  :global(html.dark) .avatar-circle {
    --avatar-bg-color: var(--avatar-color, #333);
  }
  
  :global(html:not(.dark)) .avatar-circle {
    --avatar-bg-color: var(--avatar-color, #5b6875);
  }
  /* Estilos para las animaciones */
  .fade-up-element {
    transition: opacity 0.6s ease-out, transform 0.6s ease-out;
  }
  
  .fade-up-element.visible {
    opacity: 1;
    transform: translateY(0);
  }
</style>

<style>
  .container {
 padding-left: 0rem; 
 padding-right: 0rem;
  }

  .testimonial-card {
    height: 100%;
    display: flex;
    flex-direction: column;
    transition: height 0.3s ease;
  }
  
  .avatar-circle {
    aspect-ratio: 1/1;
    min-width: 3rem;
    min-height: 3rem;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    font-size: 1rem;
    line-height: 1;
  }
  
  .swiper-slide {
    height: auto;
  }
  
  .swiper-wrapper {
    align-items: stretch;
  }
  
  .swiper-pagination {
    position: relative;
    bottom: 0;
    margin-top: 2rem;
  }
  
  .swiper-pagination-bullet {
    width: 0.8625rem;
    height: 0.8625rem;
    border-radius: 50%;
    margin: 0 5px;
    opacity: 1;
    transition: all 0.3s ease;
  }
  
  .swiper-pagination-bullet-active {
    width: 2.3rem;
    border-radius: 10px;
    transform: none;
  }
  
  /* Estilos para modo oscuro */
  :global(html.dark) .swiper-pagination-bullet {
    background-color: rgba(204, 186, 247, 0.3); /* Color púrpura con opacidad */
    border-color: transparent;
  }
  
  :global(html.dark) .swiper-pagination-bullet-active {
    background-color: #7943f6; /* Color púrpura sólido */
    border-color: transparent;
  }
  
  /* Estilos para modo claro */
  :global(html:not(.dark)) .swiper-pagination-bullet {
    background-color: rgba(0, 0, 0, 0.3);
  }
  
  :global(html:not(.dark)) .swiper-pagination-bullet-active {
    background-color: rgba(0, 0, 0, 0.7);
  }
  
  
  .swiper-pagination-bullet-active {
    transform: scale(1.2);
  }
  
  /* Estilos para modo oscuro */
  /* :global(html.dark) .swiper-pagination-bullet {
    background-color: rgba(255, 255, 255, 0.3);
    border-color: transparent;
  }
  
  :global(html.dark) .swiper-pagination-bullet-active {
    background-color: transparent;
    border-color: white;
  } */
  
  /* Estilos para modo claro */
  /* :global(html:not(.dark)) .swiper-pagination-bullet {
    background-color: rgba(0, 0, 0, 0.3);
    border-color: transparent;
  }
  
  :global(html:not(.dark)) .swiper-pagination-bullet-active {
    background-color: transparent;
    border-color: #5b6875;
  } */
</style>


<style>
  /* Estilos para los botones de navegación */
  .swiper-button-next,
  .swiper-button-prev {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 40px;
    height: 40px;
    border-radius: 50%;
    /* background-color: rgba(0, 0, 0, 0.5); */
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 10;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .swiper-button-prev {
    left: -50px; /* Posicionar fuera del contenedor */
  }
  
  .swiper-button-next {
    right: -50px; /* Posicionar fuera del contenedor */
  }
  
  .swiper-button-next:after,
  .swiper-button-prev:after {
    font-size: 32px;
  }
  
  /* Estilos para modo oscuro */
  :global(html.dark) .swiper-button-next,
  :global(html.dark) .swiper-button-prev {
    /* background-color: rgba(255, 255, 255, 0.2); */
    color: #7943f6 !important; /* Color púrpura con !important para asegurar que se aplique */
  }
  
  /* Hover effects en modo oscuro */
  :global(html.dark) .swiper-button-next:hover,
  :global(html.dark) .swiper-button-prev:hover {
    color: #7943f6 !important;
    transform: translateY(-50%) scale(1.1);
  }
  
  :global(html:not(.dark)) .swiper-button-next:hover,
  :global(html:not(.dark)) .swiper-button-prev:hover {
    background-color: rgba(0, 0, 0, 0.5);
  }
  html:not(.dark) .swiper-button-next[data-astro-cid-pt67heqx], html:not(.dark) .swiper-button-prev[data-astro-cid-pt67heqx] {
    background-color: transparent;
    color: #5b6875;
  }
  .testimonial-carousel[data-astro-cid-pt67heqx] {
    padding: 0 10px;
    margin: 0 auto;
    max-width: calc(100% - 100px);
}
  /* Ocultar flechas en dispositivos móviles */
  @media (max-width: 640px) {
    .swiper-button-next,
    .swiper-button-prev {
      display: none;
    }
  }
  
  /* Ajustar el contenedor para dar espacio a las flechas */
  .testimonial-carousel {
    padding: 0 60px; /* Añadir espacio a los lados para las flechas */
    margin: 0 auto;
    max-width: calc(100% - 40px);
  }
  
  @media (max-width: 768px) {
    .testimonial-carousel {
      padding: 0 20px; /* Reducir el padding en pantallas más pequeñas */
    }
  }
</style>

<style>
  /* Estilos para SectionTitle - SOLO COLOR */
  h2.SectionTitle {
    color: #5b6875 !important;
  }

  /* En modo dark, el título cambia a morado - SOLO COLOR */
  :global(html.dark) h2.SectionTitle {
    color: #7943f6 !important;
  }

  /* Estilos para SectionSubTitle - SOLO COLOR */
  p.SectionSubTitle {
    color: #5b6875 !important;
  }

  /* En modo dark, el subtítulo permanece gris - SOLO COLOR */
  :global(html.dark) p.SectionSubTitle {
    color: #5b6875 !important;
  }
  
  /* Estilos para los nombres de testimonios */
  .testimonial-name {
    color: #5b6875 !important;
  }
  
  /* En modo dark, los nombres de testimonios cambian a morado */
  :global(html.dark) .testimonial-name {
    color: #7943f6 !important;
  }
</style>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const observerOptions = {
      root: null,
      rootMargin: '0px',
      threshold: 0.1
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const element = entry.target;
          const delay = element.dataset.delay || 0;
          
          setTimeout(() => {
            element.classList.add('visible');
          }, delay * 1000);
          
          observer.unobserve(element);
        }
      });
    }, observerOptions);

    document.querySelectorAll('.fade-up-element').forEach(element => {
      observer.observe(element);
    });
  });
</script>
