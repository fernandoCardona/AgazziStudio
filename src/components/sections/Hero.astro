---
import { loadTranslations, normalizeLanguageCode } from '../../i18n/i18n.js';
import TopWaveBackground from '../bgComponents/TopWaveBackground.astro';

const { lang = 'es' } = Astro.props;
const normalizedLang = normalizeLanguageCode(lang);

// Cargar traducciones de hero con manejo de errores
let heroTranslations;
try {
  heroTranslations = await loadTranslations(normalizedLang, 'hero');
} catch (error) {
  // Fallback translations if loading fails
  heroTranslations = {
    slide1: {
      title1: "SOCIAL",
      title2: "MEDIA MANAGER",
      subtitle: "Creamos contenidos para tus redes sociales y proyectos digitales acorder contigo y tu negocio."
    },
    slide2: {
      title1: "Desarrollo",
      title2: "WEB Y APPS",
      subtitle: "Transformamos ideas en soluciones digitales, Innovación en cada clic: desarrollo web y apps que conectan."
    },
    slide3: {
      title1: "Branding",
      title2: "& Diseño grafico",
      subtitle: "Donde la creatividad se convierte en identidad, Diseñamos historias visuales que impulsan tu marca."
    }
  };
}

// Asegurarnos de que tenemos todas las traducciones necesarias para el slider
const slides = [
  {
    title1: heroTranslations.slide1?.title1 || "SOCIAL",
    title2: heroTranslations.slide1?.title2 || "MEDIA MANAGER",
    subtitle: heroTranslations.slide1?.subtitle || "Creamos contenidos para tus redes sociales y proyectos digitales acorder contigo y tu negocio.",
    bgClass: "bg-slide1"
  },
  {
    title1: heroTranslations.slide2?.title1 || "Desarrollo",
    title2: heroTranslations.slide2?.title2 || "WEB Y APPS",
    subtitle: heroTranslations.slide2?.subtitle || "Transformamos ideas en soluciones digitales, Innovación en cada clic: desarrollo web y apps que conectan.",
    bgClass: "bg-slide2"
  },
  {
    title1: heroTranslations.slide3?.title1 || "Branding",
    title2: heroTranslations.slide3?.title2 || "& Diseño grafico",
    subtitle: heroTranslations.slide3?.subtitle || "Donde la creatividad se convierte en identidad, Diseñamos historias visuales que impulsan tu marca.",
    bgClass: "bg-slide3"
  }
];
---

<section id="home" class="min-h-screen h-screen relative overflow-hidden transition-colors duration-300 z-49">
  <!-- Place TopWaveBackground outside the slider as a fixed background -->
  <div class="absolute inset-0 w-full h-full z-0 pointer-events-none wave-container">
    <TopWaveBackground />
  </div>
  <div class="hero-slider h-full">
    {slides.map((slide, index) => (
      <div class={`hero-slide absolute inset-0 ${slide.bgClass} flex flex-col justify-center opacity-0 transition-opacity duration-1000 ease-in-out`} data-index={index}>
        {index === 0 && (
          <div id="lottieContainer" class="absolute inset-0 w-full h-full md:w-1/2 md:right-0 md:left-auto z-0"></div>
        )}
        {index === 1 && (
          <div id="developLottieContainer" class="absolute inset-0 w-full h-full md:w-1/2 md:right-0 md:left-auto z-0"></div>
        )}
        {index === 2 && (
          <div id="designLottieContainer" class="absolute inset-0 w-full h-full md:w-1/2 md:right-0 md:left-auto z-0"></div>
        )}
        <div class="titleContainer container h-full flex flex-col justify-center mx-auto px-4 sm:px-10 md:px-12 relative z-10">
          <div class="h-full w-full lg:w-[50%] md:mx-4 flex flex-col justify-center">
            <div class="w-full flex flex-col justify-center items-center md:items-start md:text-left gap-[25px]">
              <h1 class="text-[80px] xs:text-[100px] sm:text-[100px] md:text-[130px] lg:text-[170px] xl:text-[200px] leading-[84px] xs:leading-[104px] sm:leading-[104px] md:leading-[134px] lg:leading-[174px] xl:leading-[204px] font-display text-center md:text-left sm:mt-[70px] md:mt-[0px]">
                <span class="w-full hero-title-1 block typewriter-text" data-text={slide.title1}></span>
                <span class="hero-title-2 block typewriter-text " data-text={slide.title2}></span>
              </h1>
              <p class="hero-subtitle h-[100px] text-[16px] xs:text-[18px] sm:text-[22px] leading-[20px] xs:leading-[22px] sm:leading-[26px] font-sans max-w-[90%] md:max-w-[50%] lg:max-w-[100%]  typewriter-text text-center md:text-left" data-text={slide.subtitle}></p>
            </div>
          </div>
        </div>
      </div>
    ))}
  </div>
  
  <div class="absolute bottom-8 left-1/2 transform -translate-x-1/2 flex space-x-2 z-10">
    {slides.map((_, index) => (
      <button class="hero-dot w-3 h-3 rounded-full transition-all duration-300" data-index={index}></button>
    ))}
  </div>
</section>

<style>
  /* Wave background container styles */
  .wave-container {
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    position: absolute;
  }
  :global(.wave-background) {
    position: absolute !important;
    top: 0 !important;
    left: 0 !important;
    width: 100% !important;
    height: 100% !important;
    z-index: 0 !important;
    pointer-events: none !important;
  }
  /* Ensure SVG fills the container properly */
  :global(.wave-svg) {
    position: absolute !important;
    top: 0 !important;
    left: 0 !important;
    width: 100% !important;
    height: 100% !important;
    display: block !important;
  }
  :global(.top-wave-background) {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 0;
    pointer-events: none;
  }
  /* Make sure slide backgrounds are transparent to show the wave background */
  .bg-slide1, .bg-slide2, .bg-slide3 {
    background-color: transparent !important;
  }
  .titleContainer {
    max-width: 100vw;
  }
  /* Adjust z-index to ensure proper layering */
  .hero-slider {
    position: relative;
    z-index: 1;
  }
  /* Base styles for both themes */
  .hero-slide {
    transition: opacity 1s ease-in-out;
    height: 100%;
  }
  
  /* Fix for mobile viewport height issues */
  @media (max-width: 768px) {
    #home {
      height: 100vh;
      /* Fix for mobile browsers that have issues with vh units */
      height: -webkit-fill-available;
    }
    .wave-container {
      top: 0 !important;
      height: 100% !important;
    }
    
    :global(.wave-background),
    :global(.wave-svg) {
      height: 100% !important;
    }
    
    .hero-slider, .hero-slide {
      height: 100%;
    }
  }
  
  /* Light theme styles (default) */
  :root:not(.dark) .hero-slide {
    background-color: white;
  }
  
  :root:not(.dark) .hero-title-1,
  :root:not(.dark) .hero-title-2{
    color: #7943f6;
  }

  :root:not(.dark) .hero-subtitle {
    color: #5b6875;
  }
  
  :root:not(.dark) .hero-dot {
    background-color: rgba(91, 104, 117, 0.5); /* Using gray #5b6875 with opacity */
  }
  
  :root:not(.dark) .hero-dot.active {
    background-color: rgba(91, 104, 117, 1); /* Solid gray #5b6875 */
    width: 2rem;
    border-radius: 1rem;
  }
  
  /* Dark theme styles */
  :root.dark .hero-slide {
    background-color: black;
  }
  
  :root.dark .hero-title-1,
  :root.dark .hero-title-2 {
    color: #7943f6;
  }
 
  :root.dark .hero-subtitle {
    color: white;
  }
  
  :root.dark .hero-dot {
    background-color: rgba(238, 123, 179, 0.5); /* Using pink #ee7bb3 with opacity */
  }
  
  :root.dark .hero-dot.active {
    background-color: rgba(238, 123, 179, 1); /* Solid pink #ee7bb3 */
    width: 2rem;
    border-radius: 1rem;
  }
  
  .typewriter-text {
    position: relative;
    display: inline-block;
    overflow: visible;
    white-space: nowrap;
  }
  
  .hero-subtitle.typewriter-text {
    white-space: normal;
    display: block;
    width: 100%;
    position: relative;
  }
  
  .typewriter-text.typing-complete {
    border-right: none;
  }
  
  /* Modificar los estilos del cursor para adaptarse a la tipografía */
  /* Comentamos los estilos del cursor */
  /*
  .typewriter-text .cursor {
    display: inline-block;
    animation: blink 0.7s infinite;
    position: relative;
    vertical-align: middle;
    margin-left: 2px;
  }
  
  /* Estilos específicos para el cursor del título - siempre morado */
  .hero-title-1 .cursor,
  .hero-title-2 .cursor {
    background-color: #7943f6 !important;
    height: 1em !important;
  }
  
  /* Estilos para el cursor del subtítulo en modo oscuro - blanco */
  :root.dark .hero-subtitle .cursor {
    background-color: white !important;
    height: 1.2em !important;
  }
  
  /* Estilos para el cursor del subtítulo en modo claro - gris */
  :root:not(.dark) .hero-subtitle .cursor {
    background-color: #5b6875 !important;
    height: 1.2em !important;
  }
  
  @keyframes blink {
    0%, 100% { opacity: 1; }
    50% { opacity: 0; }
  }
  
  /* Asegurarnos de que no haya cursor en elementos completados */
  .typewriter-text.typing-complete .cursor {
    display: none !important;
    opacity: 0 !important;
    width: 0 !important;
    height: 0 !important;
  }
  
  .typewriter-text.typing-complete .cursor {
    display: none !important;
  }
 /* .bg-slide1 */
  
  /* Add background styles for slides */
  .bg-slide1 {
    background-color: var(--color-background);
    background-size: cover;
    background-position: center;
  }
  
  .bg-slide2 {
    background-color: var(--color-background);
    background-size: cover;
    background-position: center;
  }
  
  .bg-slide3 {
    background-color: var(--color-background);
    background-size: cover;
    background-position: center;
  }
  
  /* Add this to your existing styles */
  #home {
    height: 100vh; /* Fallback */
    height: calc(var(--vh, 1vh) * 100);
  }
</style>
<style>
  /* Añadir estilos para los contenedores Lottie */
  #lottieContainer,
  #developLottieContainer,
  #designLottieContainer {
    position: absolute;
    z-index: 0;
    pointer-events: none;
    background-color: transparent !important;
    opacity: 0; /* Iniciar con opacidad 0 para el fade-in */
    transition: opacity 1.2s ease-in-out; /* Añadir transición suave */
  }
  
  /* Estilos responsivos para Lottie */
  @media (min-width: 768px) {
    #lottieContainer,
    #developLottieContainer {
      width: 50%;
      height: 100%;
      right: 0;
      left: auto;
      top: 50%;
      transform: translateY(-50%);
    }
    
    /* Reduce the third Lottie (Design) by 10% on desktop */
    
    #designLottieContainer {
      width: 50%; /* 20% smaller than the standard 50% */
      height: 90%; /* Also reduce height by 20% */
      right: 0;
      left: auto;
      top: 50%;
      transform: translateY(-50%);
    }
  }
  
  @media (max-width: 767px) {
    /* Base styles for all Lottie containers on mobile */
    #lottieContainer,
    #developLottieContainer,
    #designLottieContainer {
      /*opacity: 0.5 !important;  Force opacity in mobile */
      position: absolute;
      bottom: 0;
      left: 50%;
      transform: translateX(-50%);
      top: auto; /* Ensure top is not set */
      height: 60%; /* Reduce height to ensure it stays at bottom */
    }
    
    /* First Lottie (Social Media) - 10% smaller */
    #lottieContainer {
      width: 90%;
    }
    
    /* Second Lottie (Development) - keep current size */
    #developLottieContainer {
      width: 100%;
    }
    
    /* Third Lottie (Design) - 15% smaller */
    #designLottieContainer {
      width: 85%;
    }
    
    /* Adjust text container position on mobile */
    .container {
      z-index: 5;
      position: relative;
    }
    
    /* Move text higher on mobile and add more space at bottom */
    .container .flex-col {
      padding-bottom: 40%; /* Increase space at bottom to avoid overlap */
    }
    
    /* Ensure text container is positioned higher */
    .container .h-full {
      padding-top: 10%;
    }
  }
  
  /* Asegurarse de que todos los elementos SVG dentro del contenedor sean transparentes */
  #lottieContainer svg,
  #lottieContainer svg rect,
  #lottieContainer svg > rect,
  #developLottieContainer svg,
  #developLottieContainer svg rect,
  #developLottieContainer svg > rect,
  #designLottieContainer svg,
  #designLottieContainer svg rect,
  #designLottieContainer svg > rect {
    background-color: transparent !important;
    fill: transparent !important;
  }
  @media (max-width: 640px) {
     /* Move text higher on mobile and add more space at bottom */
     .container .flex-col {
      padding-bottom: 30%; /* Increase space at bottom to avoid overlap */
    }
  }
</style>

<!-- Añadir la biblioteca Lottie -->
<script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/lottie-web/5.12.2/lottie.min.js"></script>

<script is:inline>

  document.addEventListener('DOMContentLoaded', () => {
    // Fix for mobile viewport height
    function setMobileHeight() {
      const vh = window.innerHeight * 0.01;
      document.documentElement.style.setProperty('--vh', `${vh}px`);
    }
    
    // Run on page load
    setMobileHeight();
    
    // Run on resize
    window.addEventListener('resize', setMobileHeight);
    
    let currentSlide = 0;
    const slides = document.querySelectorAll('.hero-slide');
    const dots = document.querySelectorAll('.hero-dot');
    const slidesCount = slides.length;
    let slideInterval;
    let lottieAnimation = null;
    let developLottieAnimation = null;
    let designLottieAnimation = null;
    
    // Inicializar las animaciones Lottie
    function initLottie() {
      // Verificar si la biblioteca Lottie está cargada
      if (typeof lottie === 'undefined') {
        console.error('Lottie library not loaded');
        // Intentar cargar la biblioteca de nuevo
        const script = document.createElement('script');
        script.src = "https://cdnjs.cloudflare.com/ajax/libs/lottie-web/5.12.2/lottie.min.js";
        script.onload = function() {
          // console.log('Lottie library loaded manually');
          loadLottieAnimations();
        };
        document.head.appendChild(script);
        return;
      }
      
      loadLottieAnimations();
    }
    
    function loadLottieAnimations() {
      // Cargar las tres animaciones
      loadSocialMediaLottie();
      loadDevelopLottie();
      loadDesignLottie();
    }
    
    function loadSocialMediaLottie() {
      const container = document.getElementById('lottieContainer');
      if (!container) {
        console.error('Social Media Lottie container not found');
        return;
      }
      
      // console.log('Inicializando animación Social Media Lottie');
      
      // Set initial opacity based on screen size
      if (window.innerWidth < 768) {
        container.style.opacity = '1';
      } else {
        container.style.opacity = '1';
      }
      
      // Limpiar el contenedor por si acaso
      container.innerHTML = '';
      
      try {
        // Crear la animación con configuración para transparencia
        lottieAnimation = lottie.loadAnimation({
          container: container,
          renderer: 'svg',
          loop: true,
          autoplay: false, // Start paused until needed
          path: '/assets/lottie/HeroSocialMediaLottie.json',
          rendererSettings: {
            clearCanvas: true,
            progressiveLoad: false,
            preserveAspectRatio: 'xMidYMid meet',
            backgroundColor: 'transparent'
          }
        });
        
        // console.log('Animación Social Media creada');
        
        // Manejar eventos
        lottieAnimation.addEventListener('DOMLoaded', function() {
          // console.log('Animación Social Media Lottie cargada correctamente');
          
          // Force opacity based on screen size
          if (window.innerWidth < 768) {
            container.style.opacity = '1';
          } else {
            container.style.opacity = '1';
          }
          
          // Ajustar la posición del SVG para dispositivos móviles
          const svg = container.querySelector('svg');
          if (svg) {
            svg.style.backgroundColor = 'transparent';
            svg.style.width = '100%';
            svg.style.height = '100%';
            
            // En móvil, ajustar la posición para que se vea desde abajo y centrado
            if (window.innerWidth < 768) {
              container.style.bottom = '0';
              container.style.top = 'auto';
              
              svg.style.position = 'absolute';
              svg.style.bottom = '0';
              svg.style.left = '50%';
              svg.style.transform = 'translateX(-50%)';
            }
            
            // Buscar y eliminar cualquier rectángulo de fondo blanco
            const rects = svg.querySelectorAll('rect');
            rects.forEach(rect => {
              // Si es un rectángulo de fondo (generalmente el primero y cubre todo el canvas)
              if (rect.width.baseVal.value === svg.width.baseVal.value && 
                  rect.height.baseVal.value === svg.height.baseVal.value) {
                rect.style.fill = 'transparent';
                rect.style.fillOpacity = '0';
              }
            });
          }
          
          // Si estamos en el primer slide, reproducir la animación
          if (currentSlide === 0) {
            container.style.display = 'block';
            lottieAnimation.play();
          } else {
            container.style.display = 'none';
          }
        });
        
        // Error handling...
      } catch (error) {
        console.error('Error al inicializar Social Media Lottie:', error);
      }
    }
    
    function loadDevelopLottie() {
      const container = document.getElementById('developLottieContainer');
      if (!container) {
        console.error('Develop Lottie container not found');
        return;
      }
      
      // console.log('Inicializando animación Develop Lottie');
      
      // Set initial opacity based on screen size
      if (window.innerWidth < 768) {
        container.style.opacity = '1';
      } else {
        container.style.opacity = '1';
      }
      
      // Limpiar el contenedor por si acaso
      container.innerHTML = '';
      
      try {
        // Crear la animación con configuración para transparencia
        developLottieAnimation = lottie.loadAnimation({
          container: container,
          renderer: 'svg',
          loop: true,
          autoplay: false, // Start paused until needed
          path: '/assets/lottie/heroDevelopLottie.json',
          rendererSettings: {
            clearCanvas: true,
            progressiveLoad: false,
            preserveAspectRatio: 'xMidYMid meet',
            backgroundColor: 'transparent'
          }
        });
        
        // console.log('Animación Develop creada');
        
        // Manejar eventos
        developLottieAnimation.addEventListener('DOMLoaded', function() {
          // console.log('Animación Develop Lottie cargada correctamente');
          
          // Force opacity based on screen size
          if (window.innerWidth < 768) {
            container.style.opacity = '1';
          } else {
            container.style.opacity = '1';
          }
          
          // Ajustar la posición del SVG para dispositivos móviles
          const svg = container.querySelector('svg');
          if (svg) {
            svg.style.backgroundColor = 'transparent';
            svg.style.width = '100%';
            svg.style.height = '100%';
            
            // En móvil, ajustar la posición para que se vea desde abajo
            if (window.innerWidth < 768) {
              svg.style.position = 'absolute';
              svg.style.bottom = '0';
            }
            
            // Buscar y eliminar cualquier rectángulo de fondo blanco
            const rects = svg.querySelectorAll('rect');
            rects.forEach(rect => {
              // Si es un rectángulo de fondo (generalmente el primero y cubre todo el canvas)
              if (rect.width.baseVal.value === svg.width.baseVal.value && 
                  rect.height.baseVal.value === svg.height.baseVal.value) {
                rect.style.fill = 'transparent';
                rect.style.fillOpacity = '0';
              }
            });
          }
          
          // Si estamos en el segundo slide, reproducir la animación
          if (currentSlide === 1) {
            container.style.display = 'block';
            developLottieAnimation.play();
          } else {
            container.style.display = 'none';
          }
        });
        
        // Error handling...
      } catch (error) {
        console.error('Error al inicializar Develop Lottie:', error);
      }
    }
    
    function loadDesignLottie() {
      const container = document.getElementById('designLottieContainer');
      if (!container) {
        console.error('Design Lottie container not found');
        return;
      }
      
      // console.log('Inicializando animación Design Lottie');
      // Iniciar con opacidad 0 para el fade-in
      container.style.opacity = '0';
      
      // Set initial opacity based on screen size
      if (window.innerWidth < 768) {
        container.style.opacity = '0';
      } else {
        container.style.opacity = '1';
      }
      
      // Limpiar el contenedor por si acaso
      container.innerHTML = '';
      
      try {
        // Crear la animación con configuración para transparencia
        designLottieAnimation = lottie.loadAnimation({
          container: container,
          renderer: 'svg',
          loop: true,
          autoplay: false, // Start paused until needed
          path: '/assets/lottie/heroDesingLottie.json',
          rendererSettings: {
            clearCanvas: true,
            progressiveLoad: false,
            preserveAspectRatio: 'xMidYMid meet',
            backgroundColor: 'transparent'
          }
        });
        
        // console.log('Animación Design creada');
        
        // Manejar eventos
        designLottieAnimation.addEventListener('DOMLoaded', function() {
          // console.log('Animación Design Lottie cargada correctamente');
          
          // Force opacity based on screen size
          if (window.innerWidth < 768) {
            container.style.opacity = '1';
          } else {
            container.style.opacity = '1';
          }
          
          // Ajustar la posición del SVG para dispositivos móviles
          const svg = container.querySelector('svg');
          if (svg) {
            svg.style.backgroundColor = 'transparent';
            svg.style.width = '100%';
            svg.style.height = '100%';
            
            // En móvil, ajustar la posición para que se vea desde abajo
            if (window.innerWidth < 768) {
              svg.style.position = 'absolute';
              svg.style.bottom = '0';
            }
            
            // Buscar y eliminar cualquier rectángulo de fondo blanco
            const rects = svg.querySelectorAll('rect');
            rects.forEach(rect => {
              // Si es un rectángulo de fondo (generalmente el primero y cubre todo el canvas)
              if (rect.width.baseVal.value === svg.width.baseVal.value && 
                  rect.height.baseVal.value === svg.height.baseVal.value) {
                rect.style.fill = 'transparent';
                rect.style.fillOpacity = '0';
              }
            });
          }
          

          // Si estamos en el tercer slide, reproducir la animación con fade-in
          if (currentSlide === 2) {
            container.style.display = 'block';
            designLottieAnimation.play();
            
            // Aplicar fade-in con un pequeño retraso
            setTimeout(() => {
              // Establecer la opacidad según el tamaño de pantalla
              if (window.innerWidth < 768) {
                container.style.opacity = '1';
              } else {
                container.style.opacity = '1';
              }
            }, 100);
          } else {
            container.style.display = 'none';
          }
        });
        
        designLottieAnimation.addEventListener('data_failed', function(error) {
          console.error('Error al cargar los datos de la animación Design Lottie:', error);
          
          // Intentar con una ruta alternativa
          console.log('Intentando con ruta alternativa...');
          designLottieAnimation.destroy();
          
          designLottieAnimation = lottie.loadAnimation({
            container: container,
            renderer: 'svg',
            loop: true,
            autoplay: false,
            path: 'assets/lottie/heroDesingLottie.json' // Sin la barra inicial
          });
        });
      } catch (error) {
        console.error('Error al inicializar Design Lottie:', error);
      }
    }
    
    // Inicializar Lottie después de un pequeño retraso
    setTimeout(initLottie, 1000);
    
    // Función para animar el efecto de máquina de escribir letra por letra
    function typeWriter(element, callback) {
      if (!element) return;
      
      const text = element.getAttribute('data-text') || '';
      element.textContent = '';
      
      // Verificar si es el subtítulo para aplicar un estilo diferente
      const isSubtitle = element.classList.contains('hero-subtitle');
      
      // Crear elemento solo para el texto, sin cursor
      element.innerHTML = '<span class="text-content"></span>';
      const textContent = element.querySelector('.text-content');
      
      // Asegurar que el contenedor tenga posición relativa
      textContent.style.position = 'relative';
      textContent.style.display = 'inline-block';
      
      // Velocidad de escritura según el tipo de elemento
      const speed = isSubtitle ? 50 : 100;
      
      let i = 0;
      function type() {
        if (i < text.length) {
          textContent.textContent += text.charAt(i);
          i++;
          setTimeout(type, speed);
        } else {
          // Typing complete
          element.classList.add('typing-complete');
          
          // Llamar al callback después de que termine la animación
          if (callback) {
            setTimeout(callback, 300);
          }
        }
      }
      
      // Iniciar la animación de escritura
      setTimeout(type, 200);
    }
    
    // Función para animar el texto con efecto de escritura
    function animateTypewriter(slide) {
      const title1 = slide.querySelector('.hero-title-1');
      const title2 = slide.querySelector('.hero-title-2');
      const subtitle = slide.querySelector('.hero-subtitle');
      
      if (!title1 || !title2 || !subtitle) return;
      
      // Obtener los textos a animar
      const title1Text = title1.getAttribute('data-text');
      const title2Text = title2.getAttribute('data-text');
      const subtitleText = subtitle.getAttribute('data-text');
      
      // Limpiar cualquier animación previa
      title1.innerHTML = '';
      title2.innerHTML = '';
      subtitle.innerHTML = '';
      
      // Crear los elementos del cursor para cada texto
      const cursor1 = document.createElement('span');
      cursor1.className = 'cursor';
      const cursor2 = document.createElement('span');
      cursor2.className = 'cursor';
      const cursor3 = document.createElement('span');
      cursor3.className = 'cursor';
      
      // Aplicar estilos iniciales correctos
      const isDark = document.documentElement.classList.contains('dark');
      
      // Títulos siempre morados
      title1.style.color = '#7943f6';
      title2.style.color = '#7943f6';
      
      // Subtítulo según el tema
      subtitle.style.color = isDark ? 'white' : '#5b6875';
      
      // Función para escribir texto carácter por carácter
      function typeText(element, text, cursor, speed, callback) {
        let index = 0;
        
        // Añadir el cursor al elemento
        element.appendChild(cursor);
        
        function type() {
          if (index < text.length) {
            // Crear un nodo de texto con el siguiente carácter
            const char = document.createTextNode(text.charAt(index));
            // Insertar el carácter antes del cursor
            element.insertBefore(char, cursor);
            index++;
            setTimeout(type, speed);
          } else {
            // Animación completada
            setTimeout(() => {
              // Eliminar el cursor
              if (cursor.parentNode) {
                cursor.remove();
              }
              if (callback) callback();
            }, 500);
          }
        }
        
        // Iniciar la animación
        setTimeout(type, 100);
      }
      
      // Animar secuencialmente: título1 -> título2 -> subtítulo
      typeText(title1, title1Text, cursor1, 50, () => {
        typeText(title2, title2Text, cursor2, 50, () => {
          typeText(subtitle, subtitleText, cursor3, 20);
        });
      });
    }
    
    // Función para mostrar un slide específico
    function showSlide(index) {
      // Ocultar todos los slides
      slides.forEach(slide => {
        slide.classList.remove('opacity-100');
        slide.classList.add('opacity-0');
        
        // Resetear los textos y eliminar cualquier cursor residual
        const title1 = slide.querySelector('.hero-title-1');
        const title2 = slide.querySelector('.hero-title-2');
        const subtitle = slide.querySelector('.hero-subtitle');
        
        if (title1 && title2 && subtitle) {
          title1.textContent = '';
          title1.classList.remove('typing-complete');
          title1.style.borderRight = 'none';
          
          title2.textContent = '';
          title2.classList.remove('typing-complete');
          title2.style.borderRight = 'none';
          
          // Limpiar completamente el subtítulo
          subtitle.innerHTML = '';
          subtitle.classList.remove('typing-complete');
        }
      });
      
      // Actualizar los dots
      dots.forEach(dot => {
        dot.classList.remove('active');
      });
      dots[index].classList.add('active');
      
      // Mostrar el slide actual
      slides[index].classList.remove('opacity-0');
      slides[index].classList.add('opacity-100');
      
      // Manejar las animaciones Lottie
      const socialMediaContainer = document.getElementById('lottieContainer');
      const developContainer = document.getElementById('developLottieContainer');
      const designContainer = document.getElementById('designLottieContainer');
      
       // Manejar la animación de Social Media (primer slide)
    if (socialMediaContainer && lottieAnimation) {
      if (index === 0) {
        socialMediaContainer.style.display = 'block';
        lottieAnimation.play();
        
        // Aplicar fade-in con un pequeño retraso
        setTimeout(() => {
          if (window.innerWidth < 768) {
            socialMediaContainer.style.opacity = '1';
          } else {
            socialMediaContainer.style.opacity = '1';
          }
        }, 100);
      } else {
        // Fade-out antes de ocultar
        socialMediaContainer.style.opacity = '0';
        setTimeout(() => {
          socialMediaContainer.style.display = 'none';
          lottieAnimation.pause();
        }, 300); // Esperar a que termine el fade-out
      }
    }
      
      // Manejar la animación de Desarrollo (segundo slide)
      if (developContainer && developLottieAnimation) {
        if (index === 1) {
          developContainer.style.display = 'block';
          if (window.innerWidth < 768) {
            developContainer.style.opacity = '1';
          } else {
            developContainer.style.opacity = '1';
          }
          developLottieAnimation.play();
        } else {
          developContainer.style.display = 'none';
          developLottieAnimation.pause();
        }
      }
      
      // Manejar la animación de Diseño (tercer slide)
      if (designContainer && designLottieAnimation) {
        if (index === 2) {
          designContainer.style.display = 'block';
          if (window.innerWidth < 768) {
            designContainer.style.opacity = '1';
            const svg = designContainer.querySelector('svg');
            if (svg) {
              svg.style.position = 'absolute';
              svg.style.bottom = '0';
              svg.style.left = '50%';
              svg.style.transform = 'translateX(-50%)';
            }
          } else {
            designContainer.style.opacity = '1';
            designContainer.style.width = '40%'; // 20% smaller on desktop
            designContainer.style.height = '80%'; // 20% smaller on desktop
            
            const svg = designContainer.querySelector('svg');
            if (svg) {
              svg.style.position = '';
              svg.style.bottom = '';
              svg.style.left = '';
              svg.style.transform = '';
            }
          }
        } else {
          designContainer.style.display = 'none';
          designLottieAnimation.pause();
        }
      }
      
      // Iniciar la secuencia de animación
      const title1 = slides[index].querySelector('.hero-title-1');
      const title2 = slides[index].querySelector('.hero-title-2');
      const subtitle = slides[index].querySelector('.hero-subtitle');
      
      // Primero animamos title1 con efecto de máquina de escribir
      setTimeout(() => {
        typeWriter(title1, () => {
          // Cuando termine title1, animamos title2
          typeWriter(title2, () => {
            // Cuando termine title2, animamos el subtítulo con el mismo efecto
            typeWriter(subtitle);
          });
        });
      }, 0);
      
      currentSlide = index;
    }
    
    // Inicializar el slider
    function initSlider() {
      // Comprobar si hay slides
      if (slidesCount === 0) {
        console.error('No slides found in hero component');
        return;
      }
      
      // Mostrar el primer slide inmediatamente
      showSlide(0);
      
      // Configurar el intervalo para cambiar automáticamente
      slideInterval = setInterval(nextSlide, 12000);
      
      // Añadir event listeners a los dots
      dots.forEach((dot, index) => {
        dot.addEventListener('click', () => {
          clearInterval(slideInterval);
          showSlide(index);
          slideInterval = setInterval(nextSlide, 12000);
        });
      });
    }
    
    // Función para avanzar al siguiente slide
    function nextSlide() {
      showSlide((currentSlide + 1) % slidesCount);
    }
    
    // Escuchar cambios de tema
    document.addEventListener('themeChanged', (event) => {
      const isDarkTheme = event.detail.theme === 'dark';
      
      // Actualizar el cursor y colores según el tema
      const currentSlideElement = slides[currentSlide];
      if (currentSlideElement) {
        // Actualizar solo el cursor del subtítulo, ya que el título siempre es morado
        const subtitle = currentSlideElement.querySelector('.hero-subtitle');
        
        if (subtitle) {
          const cursor = subtitle.querySelector('.cursor');
          if (cursor) {
            // Si el subtítulo ya completó la animación, eliminamos el cursor
            if (subtitle.classList.contains('typing-complete')) {
              cursor.remove();
            } else {
              // Actualizar color según el tema
              cursor.style.backgroundColor = isDarkTheme ? 'white' : '#5b6875';
              cursor.style.borderRight = `3px solid ${isDarkTheme ? 'white' : '#5b6875'}`;
            }
          }
        }
      }
    });
    
    // Iniciar el slider cuando el DOM esté cargado
    initSlider();
  });

// Función para ajustar el tamaño y posición de la animación cuando cambia el tamaño de la ventana
function handleResize() {
  const socialMediaContainer = document.getElementById('lottieContainer');
  const developContainer = document.getElementById('developLottieContainer');
  const designContainer = document.getElementById('designLottieContainer');
  
  // Ajustar los tres contenedores
  if (socialMediaContainer) {
    if (window.innerWidth < 768) {
      socialMediaContainer.style.opacity = '1';
      socialMediaContainer.style.bottom = '0';
      socialMediaContainer.style.top = 'auto';
      
      const svg = socialMediaContainer.querySelector('svg');
      if (svg) {
        svg.style.position = 'absolute';
        svg.style.bottom = '0';
        svg.style.left = '50%';
        svg.style.transform = 'translateX(-50%)';
      }
    } else {
      socialMediaContainer.style.opacity = '1';
      socialMediaContainer.style.top = '50%';
      socialMediaContainer.style.transform = 'translateY(-50%)';
      
      const svg = socialMediaContainer.querySelector('svg');
      if (svg) {
        svg.style.position = '';
        svg.style.bottom = '';
        svg.style.left = '';
        svg.style.transform = '';
      }
    }
  }
  
  if (developContainer) {
    if (window.innerWidth < 768) {
      developContainer.style.opacity = '1';
      const svg = developContainer.querySelector('svg');
      if (svg) {
        svg.style.position = 'absolute';
        svg.style.bottom = '0';
        svg.style.left = '50%';
        svg.style.transform = 'translateX(-50%)';
      }
    } else {
      developContainer.style.opacity = '1';
      const svg = developContainer.querySelector('svg');
      if (svg) {
        svg.style.position = '';
        svg.style.bottom = '';
        svg.style.left = '';
        svg.style.transform = '';
      }
    }
  }
  
  if (designContainer) {
    if (window.innerWidth < 768) {
      designContainer.style.opacity = '1';
      const svg = designContainer.querySelector('svg');
      if (svg) {
        svg.style.position = 'absolute';
        svg.style.bottom = '0';
        svg.style.left = '50%';
        svg.style.transform = 'translateX(-50%)';
      }
    } else {
      designContainer.style.opacity = '1';
      designContainer.style.width = '40%'; // 20% smaller on desktop
      designContainer.style.height = '80%'; // 20% smaller on desktop
      const svg = designContainer.querySelector('svg');
      if (svg) {
        svg.style.position = '';
        svg.style.bottom = '';
        svg.style.left = '';
        svg.style.transform = '';
      }
    }
  }
}

// Escuchar eventos de cambio de tamaño
window.addEventListener('resize', handleResize);
</script>
